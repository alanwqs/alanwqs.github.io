(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{181:function(n,_,v){"use strict";v.r(_);var l=v(0),i=Object(l.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,_=n.$createElement,v=n._self._c||_;return v("div",{staticClass:"content"},[v("ol",[v("li",[n._v("两数之和\n52.1%\n简单")]),n._v(" "),v("li",[n._v("寻找两个正序数组的中位数\n40.9%\n困难")]),n._v(" "),v("li",[n._v("最长回文子串\n35.5%\n中等")]),n._v(" "),v("li",[n._v("反转链表\n72.3%\n简单")]),n._v(" "),v("li",[n._v("合并两个有序链表\n66.7%\n简单")]),n._v(" "),v("li",[n._v("字符串解码\n55.3%\n中等")]),n._v(" "),v("li",[n._v("无重复字符的最长子串\n38.1%\n中等")]),n._v(" "),v("li",[n._v("编辑距离\n61.4%\n困难")]),n._v(" "),v("li",[n._v("两数相加\n40.9%\n中等")]),n._v(" "),v("li",[n._v("螺旋矩阵\n48.1%\n中等")]),n._v(" "),v("li",[n._v("LRU 缓存机制\n52.6%\n中等")]),n._v(" "),v("li",[n._v("爬楼梯\n53.0%\n简单")]),n._v(" "),v("li",[n._v("字符串转换整数 (atoi)\n21.7%\n中等")]),n._v(" "),v("li",[n._v("字符串相乘\n44.9%\n中等")]),n._v(" "),v("li",[n._v("数组中的第K个最大元素\n64.6%\n中等")]),n._v(" "),v("li",[n._v("三数之和\n33.6%\n中等")]),n._v(" "),v("li",[n._v("环形链表\n51.2%\n简单")]),n._v(" "),v("li",[n._v("回文数\n58.4%\n简单")]),n._v(" "),v("li",[n._v("鸡蛋掉落\n29.1%\n困难")]),n._v(" "),v("li",[n._v("合并K个升序链表\n56.0%\n困难")]),n._v(" "),v("li",[n._v("有效的括号\n44.5%\n简单")]),n._v(" "),v("li",[n._v("盛最多水的容器\n62.8%\n中等")]),n._v(" "),v("li",[n._v("反转字符串\n76.9%\n简单")]),n._v(" "),v("li",[n._v("排序链表\n66.7%\n中等")]),n._v(" "),v("li",[n._v("多数元素\n66.5%\n简单")]),n._v(" "),v("li",[n._v("搜索旋转排序数组\n42.7%\n中等")]),n._v(" "),v("li",[n._v("整数反转\n35.3%\n简单")]),n._v(" "),v("li",[n._v("删除有序数组中的重复项\n53.9%\n简单")]),n._v(" "),v("li",[n._v("最大子序和\n55.3%\n简单")]),n._v(" "),v("li",[n._v("全排列\n78.3%\n中等")]),n._v(" "),v("li",[n._v("用 Rand7() 实现 Rand10()\n54.7%\n中等")]),n._v(" "),v("li",[n._v("只出现一次的数字\n71.9%\n简单")]),n._v(" "),v("li",[n._v("删除链表中的节点\n84.8%\n简单")]),n._v(" "),v("li",[n._v("最小覆盖子串\n42.7%\n困难")]),n._v(" "),v("li",[n._v("接雨水\n58.1%\n困难")]),n._v(" "),v("li",[n._v("K 个一组翻转链表\n65.8%\n困难")]),n._v(" "),v("li",[n._v("格雷编码\n71.0%\n中等")]),n._v(" "),v("li",[n._v("字符串相加\n53.8%\n简单")]),n._v(" "),v("li",[n._v("零钱兑换\n44.5%\n中等")]),n._v(" "),v("li",[n._v("二叉树中的最大路径和\n44.5%\n困难")]),n._v(" "),v("li",[n._v("吃掉 N 个橘子的最少天数\n29.6%\n困难\t\n剑指 Offer 24. 反转链表\n74.3%\n简单")]),n._v(" "),v("li",[n._v("合并两个有序数组\n51.7%\n简单")]),n._v(" "),v("li",[n._v("买卖股票的最佳时机\n57.3%\n简单")]),n._v(" "),v("li",[n._v("前 K 个高频元素\n62.2%\n中等")]),n._v(" "),v("li",[n._v("正则表达式匹配\n31.6%\n困难")]),n._v(" "),v("li",[n._v("二叉搜索树中第K小的元素\n74.2%\n中等")]),n._v(" "),v("li",[n._v("寻找重复数\n66.0%\n中等")]),n._v(" "),v("li",[n._v("二叉树的最近公共祖先\n68.1%\n中等")]),n._v(" "),v("li",[n._v("螺旋矩阵 II\n79.0%\n中等")])]),n._v(" "),v("hr"),n._v(" "),v("ol",{attrs:{start:"104"}},[v("li",[n._v("二叉树的最大深度\n76.6%\n简单")]),n._v(" "),v("li",[n._v("除自身以外数组的乘积\n72.3%\n中等")]),n._v(" "),v("li",[n._v("二叉树的右视图\n65.2%\n中等")]),n._v(" "),v("li",[n._v("从前序与中序遍历序列构造二叉树\n70.4%\n中等")]),n._v(" "),v("li",[n._v("岛屿数量\n55.7%\n中等")]),n._v(" "),v("li",[n._v("旋转链表\n41.8%\n中等")]),n._v(" "),v("li",[n._v("分发糖果\n48.6%\n困难")]),n._v(" "),v("li",[n._v("反转链表 II\n54.9%\n中等\t\n剑指 Offer 42. 连续子数组的最大和\n60.5%\n简单\t\n面试题 16.25. LRU 缓存\n54.6%\n中等")]),n._v(" "),v("li",[n._v("Pow(x, n)\n37.6%\n中等")]),n._v(" "),v("li",[n._v("括号生成\n77.2%\n中等\t\n剑指 Offer 09. 用两个栈实现队列\n71.6%\n简单")]),n._v(" "),v("li",[n._v("删除链表的倒数第 N 个结点\n42.9%\n中等")]),n._v(" "),v("li",[n._v("目标和\n49.4%\n中等")]),n._v(" "),v("li",[n._v("相交链表\n61.4%\n简单")]),n._v(" "),v("li",[n._v("下一个排列\n37.3%\n中等")]),n._v(" "),v("li",[n._v("二叉树的层序遍历\n64.2%\n中等")]),n._v(" "),v("li",[n._v("搜索二维矩阵 II\n47.8%\n中等")]),n._v(" "),v("li",[n._v("数组中重复的数据\n69.8%\n中等")]),n._v(" "),v("li",[n._v("最接近的三数之和\n45.9%\n中等")]),n._v(" "),v("li",[n._v("最长递增子序列\n51.6%\n中等")]),n._v(" "),v("li",[n._v("翻转字符串里的单词\n48.4%\n中等")]),n._v(" "),v("li",[n._v("Z 字形变换\n50.7%\n中等")]),n._v(" "),v("li",[n._v("子集\n80.1%\n中等")]),n._v(" "),v("li",[n._v("打乱数组\n57.9%\n中等")]),n._v(" "),v("li",[n._v("最小栈\n57.3%\n简单")]),n._v(" "),v("li",[n._v("乘积最大子数组\n42.1%\n中等")]),n._v(" "),v("li",[n._v("完全二叉树的节点个数\n78.1%\n中等")]),n._v(" "),v("li",[n._v("旋转图像\n73.5%\n中等")]),n._v(" "),v("li",[n._v("最大数\n41.0%\n中等")]),n._v(" "),v("li",[n._v("打家劫舍 II\n43.3%\n中等")]),n._v(" "),v("li",[n._v("二叉树的前序遍历\n70.4%\n简单")]),n._v(" "),v("li",[n._v("最长公共前缀\n41.0%\n简单")]),n._v(" "),v("li",[n._v("回文链表\n49.6%\n简单")]),n._v(" "),v("li",[n._v("最长连续序列\n54.3%\n中等")]),n._v(" "),v("li",[n._v("柱状图中最大的矩形\n43.3%\n困难")]),n._v(" "),v("li",[n._v("缺失的第一个正数\n41.9%\n困难")]),n._v(" "),v("li",[n._v("环形链表 II\n55.3%\n中等")]),n._v(" "),v("li",[n._v("部门工资前三高的所有员工\n49.6%\n困难")]),n._v(" "),v("li",[n._v("计数质数\n37.8%\n中等")]),n._v(" "),v("li",[n._v("组合总和\n72.8%\n中等")]),n._v(" "),v("li",[n._v("最小路径和\n68.8%\n中等")]),n._v(" "),v("li",[n._v("实现 strStr()\n40.6%\n简单")]),n._v(" "),v("li",[n._v("组合两个表\n74.0%\n简单")]),n._v(" "),v("li",[n._v("二叉搜索树的最近公共祖先\n66.6%\n简单")]),n._v(" "),v("li",[n._v("2 的幂\n50.4%\n简单")]),n._v(" "),v("li",[n._v("用队列实现栈\n67.6%\n简单")]),n._v(" "),v("li",[n._v("复原 IP 地址\n54.0%\n中等\t\n剑指 Offer 22. 链表中倒数第k个节点\n79.8%\n简单")])])])}],!1,null,null,null);_.default=i.exports}}]);